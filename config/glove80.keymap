
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Home 0
#define LAYER_Engram 1
#define LAYER_Gaming 2
#define LAYER_Symbols 3
#define LAYER_Numpad 4
#define LAYER_Mod 5
#define LAYER_Magic 6

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */
#include <dt-bindings/zmk/rgb_colors.h>
/ {
    underglow-layer {
        compatible  = "zmk,underglow-layer";
        Home {
            bindings = <
                PURPLE PURPLE PURPLE PURPLE PURPLE                                                          PURPLE PURPLE PURPLE PURPLE PURPLE
                PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE                                            PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE
                PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE                                            PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE
                PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE                                            PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE
                PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE  PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE PURPLE
                PURPLE PURPLE PURPLE PURPLE PURPLE        PURPLE PURPLE PURPLE  PURPLE PURPLE PURPLE        PURPLE PURPLE PURPLE PURPLE PURPLE
                >;
            layer-id = <LAYER_Home>;
        };
        Mod {
            bindings = <
                   RED    RED    RED    RED    RED                                                             RED    RED    RED    RED    RED
                   RED    RED    RED    RED    RED    RED                                               RED    RED    RED    RED    RED    RED
                   RED    RED    RED    RED    RED    RED                                               RED    RED    RED    RED    RED    RED
                   RED    RED    RED    RED    RED    RED                                               RED    RED    RED    RED    RED    RED
                   RED    RED    RED    RED    RED    RED    RED    RED    RED     RED    RED    RED    RED    RED    RED    RED    RED    RED
                   RED    RED    RED    RED    RED           RED    RED    RED     RED    RED    RED           RED    RED    RED    RED    RED
                >;
            layer-id = <LAYER_Mod>;
        };
        Gaming {
            bindings = <
                  TEAL   TEAL   TEAL   TEAL   TEAL                                                            TEAL   TEAL   TEAL   TEAL   TEAL
                  TEAL   TEAL   TEAL   TEAL   TEAL   TEAL                                              TEAL   TEAL   TEAL   TEAL   TEAL   TEAL
                  TEAL   TEAL   TEAL   TEAL   TEAL   TEAL                                              TEAL   TEAL   TEAL   TEAL   TEAL   TEAL
                  TEAL   TEAL   TEAL   TEAL   TEAL   TEAL                                              TEAL   TEAL   TEAL   TEAL   TEAL   TEAL
                  TEAL   TEAL   TEAL   TEAL   TEAL   TEAL   TEAL   TEAL   TEAL    TEAL   TEAL   TEAL   TEAL   TEAL   TEAL   TEAL   TEAL   TEAL
                  TEAL   TEAL   TEAL   TEAL   TEAL          TEAL   TEAL   TEAL    TEAL   TEAL   TEAL          TEAL   TEAL   TEAL   TEAL   TEAL
                >;
            layer-id = <LAYER_Gaming>;
        };
        Numpad {
            bindings = <
                  GOLD   GOLD   GOLD   GOLD   GOLD                                                            GOLD   GOLD   GOLD   GOLD   GOLD
                  GOLD   GOLD   GOLD   GOLD   GOLD   GOLD                                              GOLD   GOLD   GOLD   GOLD   GOLD   GOLD
                  GOLD   GOLD   GOLD   GOLD   GOLD   GOLD                                              GOLD   GOLD   GOLD   GOLD   GOLD   GOLD
                  GOLD   GOLD   GOLD   GOLD   GOLD   GOLD                                              GOLD   GOLD   GOLD   GOLD   GOLD   GOLD
                  GOLD   GOLD   GOLD   GOLD   GOLD   GOLD   GOLD   GOLD   GOLD    GOLD   GOLD   GOLD   GOLD   GOLD   GOLD   GOLD   GOLD   GOLD
                  GOLD   GOLD   GOLD   GOLD   GOLD          GOLD   GOLD   GOLD    GOLD   GOLD   GOLD          GOLD   GOLD   GOLD   GOLD   GOLD
                >;
            layer-id = <LAYER_Numpad>;
        };
        Engram {
            bindings = <
                 GREEN  GREEN  GREEN  GREEN  GREEN                                                           GREEN  GREEN  GREEN  GREEN  GREEN
                 GREEN  GREEN  GREEN  GREEN  GREEN  GREEN                                             GREEN  GREEN  GREEN  GREEN  GREEN  GREEN
                 GREEN  GREEN  GREEN  GREEN  GREEN  GREEN                                             GREEN  GREEN  GREEN  GREEN  GREEN  GREEN
                 GREEN  GREEN  GREEN  GREEN  GREEN  GREEN                                             GREEN  GREEN  GREEN  GREEN  GREEN  GREEN
                 GREEN  GREEN  GREEN  GREEN  GREEN  GREEN  GREEN  GREEN  GREEN   GREEN  GREEN  GREEN  GREEN  GREEN  GREEN  GREEN  GREEN  GREEN
                 GREEN  GREEN  GREEN  GREEN  GREEN         GREEN  GREEN  GREEN   GREEN  GREEN  GREEN         GREEN  GREEN  GREEN  GREEN  GREEN
                >;
            layer-id = <LAYER_Engram>;
        };
        Magic {
            bindings = <
                  BLUE ______ ______ ORANGE ORANGE                                                          ORANGE ORANGE ______ ______   BLUE
                ______ ______ ______ ______ ______ ______                                            ______ ______ ______ ______ ______ ______
                ______ ______ ______  GREEN  GREEN PURPLE                                            ______ ______ ______ ______ ______ ______
                ______ ______ ______    RED    RED  WHITE                                            ______ ______ ______ ______ ______ ______
                ______ ______ ______ ______ ______   TEAL ORANGE ORANGE ______  ______ ______ ______ ______ ______ ______ ______ ______ ______
                ______ ______ ______ ______ ______        ORANGE ORANGE ORANGE  ______ ______ ______        ______ ______ ______ ______ ______
                >;
            layer-id = <LAYER_Magic>;
        };
    };
};


/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {
    #define _UNDO       LC(Z)
    #define _ALL        LC(A)
    #define _CUT        LC(X)
    #define _COPY       LC(C)
    #define _PASTE      LC(V)
    #define _REDO       LC(Y)
    #define _SAVE       LC(S)
    #define _ALTSAVE    LA(S)
    #define _NEWTAB     LC(T)
    #define _NEXTTAB    LC(TAB)
    #define _PREVTAB    LC(LS(TAB))
    #define _PRIVTAB    LC(LS(N))
    #define _AUTOFILL   LC(LS(U))
    #define _4MONITOR   LA(LS(UP))
    #define _3MONITOR   LA(LS(RIGHT))
    #define _2MONITOR   LA(LS(DOWN))
    
    behaviors {
        winshorts: winshorts {
            compatible = "zmk,behavior-tap-dance";
            label = "WIN_SHORTS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(F10)>, <&kp LC(F11)>;
        };    
        scrshot: scrshot {
            compatible = "zmk,behavior-tap-dance";
            label = "SCR_SHOT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(PSCRN)>, <&kp LA(PSCRN)>, <&kp LC(LS(PSCRN))>;
        };
        hotkeys: hotkeys {
            compatible = "zmk,behavior-tap-dance";
            label = "HK_PWORD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(F9)>, <&kp LC(F8)>;
        };
        newtab: newtab {
            compatible = "zmk,behavior-tap-dance";
            label = "HK_NEWTAB";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp _NEWTAB>, <&kp _PRIVTAB>;
        };
        mixer: mixer {
            compatible = "zmk,behavior-tap-dance";
            label = "HK_MKEY";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(LS(UP))>, <&kp LC(LS(DOWN))>;
        };
        cca: cca {
            compatible = "zmk,behavior-tap-dance";
            label = "HK_CCA";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt _ALL _COPY>, <&kp _CUT>;
        }; 
        monitors: monitors {
            compatible = "zmk,behavior-tap-dance";
            label = "HK_MONITORS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp _4MONITOR>, <&kp _2MONITOR>, <&kp _3MONITOR>;
        }; 
    };
};

/* Automatically generated macro definitions */
/ {
    macros {
    
    };
};

/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Home {
            bindings = <
     &to 2     &none     &none  &scrshot     &none                                                                                              &kp EQUAL      &none     &none     &none      &none
   &kp ESC    &kp N1    &kp N2    &kp N3    &kp N4  &kp N5                                                                              &kp N6     &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
   &kp TAB     &kp Q     &kp W     &kp E     &kp R   &kp T                                                                               &kp Y      &kp U      &kp I     &kp O     &kp P   &kp BSLH
     &mo 5     &kp A     &kp S     &kp D     &kp F   &kp G                                                                               &kp H      &kp J      &kp K     &kp L  &kp SEMI    &kp SQT
 &kp LSHFT     &kp Z     &kp X     &kp C     &kp V   &kp B       &cca     &mo 3  &kp _NEXTTAB  &magic LAYER_Magic 0     &none    &mo 3   &kp N      &kp M  &kp COMMA   &kp DOT  &kp FSLH  &kp RSHFT
 &kp LCTRL  &kp LGUI  &kp LBKT  &kp RBKT  &kp SEMI          &kp SPACE  &kp LALT       &kp RET                 &mo 4  &kp BSPC  &kp RET            &kp SQT   &kp LPAR  &kp RPAR     &none      &none
            >;
        };

        layer_Engram {
            bindings = <
  &to 2      &none     &none  &scrshot     &none                                                                                                &none      &none    &none      &none      &to 0
  &none    &kp ESC     &kp Q     &kp Z     &none   &none                                                                               &none    &none      &none    &none  &kp EQUAL  &kp MINUS
  &none    &kp TAB     &kp B     &kp Y     &kp O   &kp U                                                                               &kp L    &kp D      &kp W    &kp V      &kp Q      &none
  &mo 4      &mo 5     &kp C     &kp I     &kp E   &kp A                                                                               &kp H    &kp T      &kp S    &kp N      &kp Z   &kp BSLH
  &none  &kp LSHFT     &kp G     &kp X     &kp J   &kp K       &cca     &mo 3  &kp _NEXTTAB  &magic LAYER_Magic 0     &none    &mo 3   &kp R    &kp M      &kp F    &kp P  &kp RSHFT   &kp FSLH
  &none  &kp LCTRL  &kp LGUI     &none  &kp SEMI          &kp SPACE  &kp LALT       &kp RET                 &mo 4  &kp BSPC  &kp RET          &kp SQT  &kp COMMA  &kp DOT      &none      &none
            >;
        };

        layer_Gaming {
            bindings = <
  &to 0      &none     &none  &scrshot     &none                                                                                          &kp EQUAL      &none    &none     &none      &none
  &none    &kp ESC     &kp L     &kp N     &kp G   &kp T                                                                           &none      &none      &none    &none     &none  &kp MINUS
  &none    &kp TAB     &kp Q     &kp W     &kp E   &kp R                                                                           &kp Y      &kp U      &kp I    &kp O     &kp P   &kp BSLH
  &mo 5  &kp LSHFT     &kp A     &kp S     &kp D   &kp F                                                                           &kp H      &kp J      &kp K    &kp L  &kp SEMI    &kp SQT
  &none  &kp LCTRL     &kp Z     &kp X     &kp C   &kp V    &kp TAB     &kp B    &kp P  &magic LAYER_Magic 0     &none  &kp BSPC   &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
  &none   &kp LGUI  &kp LBKT  &kp RBKT  &kp SEMI          &kp SPACE  &kp LALT  &kp RET                 &mo 4  &kp BSPC   &kp RET             &trans     &trans   &trans    &trans     &trans
            >;
        };

        layer_Symbols {
            bindings = <
  &to 0     &none      &none     &none     &none                                                                         &none   &none   &none   &none   &none
  &none  &kp PIPE   &kp LPAR  &kp RPAR  &kp LBKT   &kp RBKT                                                      &none   &none   &none   &none   &none   &none
  &none   &kp DQT  &kp GRAVE    &kp LT    &kp GT  &kp PRCNT                                                      &none   &none   &none   &none   &none   &none
  &none   &kp SQT   &kp EXCL    &kp AT  &kp HASH   &kp DLLR                                                      &none   &none   &none   &none   &none   &none
  &none     &none  &kp CARET  &kp AMPS  &kp STAR   &kp PLUS   &kp SEMI   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none
  &none     &none      &none  &kp LBRC  &kp RBRC             &kp COLON   &none   &none   &none   &none   &none           &none   &none   &none   &none   &none
            >;
        };

        layer_Numpad {
            bindings = <
  &to 0   &none      &none     &none     &none                                                                           &none   &none   &none   &none   &none
  &none   &none      &none  &kp STAR  &kp FSLH     &none                                                         &none   &none   &none   &none   &none   &none
  &none   &none     &kp N1    &kp N2    &kp N3    &kp N4                                                         &none   &none   &none   &none   &none   &none
  &none   &none     &kp N5    &kp N6    &kp N7    &kp N8                                                         &none   &none   &none   &none   &none   &none
  &none   &none  &kp MINUS    &kp N9    &kp N0  &kp PLUS  &kp EQUAL     &none    &none   &none   &none   &none   &none   &none   &none   &none   &none   &none
  &none   &none      &none  &kp STAR  &kp FSLH            &kp SPACE  &kp LALT  &kp RET   &none   &none   &none           &none   &none   &none   &none   &none
            >;
        };

        layer_Mod {
            bindings = <
 &kp LC(LA(DEL))   &none           &none          &mixer          &newtab                                                                                        &kp F12     &none      &none    &none    &none
       &kp GRAVE  &kp F1          &kp F2          &kp F3           &kp F4    &kp F5                                                                     &kp F6    &kp F7    &kp F8     &kp F9  &kp F10  &kp F11
          &trans  &trans        &kp HOME    &kp UP_ARROW          &kp END   &kp DEL                                                                   &kp LBKT     &none    &kp UP      &none    &none    &none
          &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp BSPC                                                                   &kp RBKT  &kp LEFT  &kp DOWN  &kp RIGHT    &none    &none
          &trans  &trans      &kp C_PREV        &kp C_PP       &kp C_NEXT     &kp M  &kp _PASTE       &hotkeys  &kp _PREVTAB   &none   &none   &none     &none     &none     &none      &none    &none    &none
          &trans   &none           &none           &kp U            &kp O            &winshorts  &kp _AUTOFILL         &sl 6   &to 0   &to 4   &to 1               &none     &none      &none    &none    &none
            >;
        };

        layer_Magic {
            bindings = <
 &bt BT_CLR   &none   &none       &sys_reset      &bootloader                                                                                 &bootloader  &sys_reset   &none   &none  &bt BT_CLR_ALL
      &none   &none   &none            &none            &none            &none                                                         &none        &none       &none   &none   &none           &none
      &none   &none   &none  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none        &none       &none   &none   &none           &none
      &none   &none   &none  &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none        &none       &none   &none   &none           &none
      &none   &none   &none            &none            &none        &monitors   &bt_2   &bt_3         &none   &none   &none   &none   &none        &none       &none   &none   &none           &none
      &none   &none   &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none                &none       &none   &none   &none           &none
            >;
        };

    };
};
